# -*- coding: utf-8 -*-
import xdrlib ,sys
import xlrd
import copy
import xlwt
import csv
import os
import re
from datetime import *
from prettytable import *

def writeTxt(str, path):
    f = open(path, 'a')
    f.write(str)
    f.close()
    return


class account:
    __myName = ''
    __Initialed = False
    __Balance_bf = 0.00
    __Deposit = 0.00
    __Realized = 0.00
    __MTM = 0.00
    __Commission = 0.00
    __Delivery_Fee = 0.00
    __Balance_cf = 0.00
    __Margin_Occupied = 0.00
    __Fund_Avail = 0.00
    __Risk_Degree = 0.00
    __Currency = 'CNY'
    __account = 0
    __mydate = ''
    __ChgInFund = 0.0
    __Payment = 0.0
    def __init__(self):
        print(" __init__(self)")
        return

    def setAccNdate(self, txt = []):
        NameToValue = {}
        for line in txt[1:]:

            str = ' '.join(line.split())
            phanzi=re.compile(u'[\u4e00-\u9fa5]+');

            res = phanzi.findall(str)
            nums = re.findall(r'(\d+)', str)


            index = 0
            for name in res:
                NameToValue[name] = nums[index]
                index += 1
        self.__account = NameToValue['账户']
        self.__mydate = NameToValue['日期']
        return
    def set(self, txt = []):
        self.__myName = '资金状况'
        NameToValue = {}
        for line in txt[1:]:

            str = ' '.join(line.split())
            phanzi=re.compile(u'[\u4e00-\u9fa5]+[\s]?[\u4e00-\u9fa5]+[\s]?[\u4e00-\u9fa5]+');

            res = phanzi.findall(str)
            nums = re.findall(r'([-+]?\d+\.\d+)', str)


            index = 0
            for name in res:
                NameToValue[name] = nums[index]
                index += 1



        self.__Balance_bf = float(NameToValue['上次结算金'])
        self.__Delivery_Fee = float(NameToValue['交割手续费'])
        self.__Deposit = float(NameToValue['出 入 金'])
        self.__Balance_cf = float(NameToValue['期末结存'])
        self.__Realized = float(NameToValue['平仓盈亏'])
        self.__Margin_Occupied = float(NameToValue['保证金占用'])
        self.__MTM = float(NameToValue['持仓盈亏'])
        self.__Fund_Avail = float(NameToValue['可用资金'])
        self.__Commission = float(NameToValue['手续费'])
        self.__Risk_Degree = float(NameToValue['风险度'])
        self.__Currency = 'CNY'
        self.__ChgInFund = 0.00 + self.__MTM - self.__Commission -self.__Payment
        self.__Initialed = True
        return

    def writeTxt(self, path):
        tempTableName = '中信期货有限公司结算会员资金状况表'
        print(str(tempTableName))
        temphead = {}

        temphead['结算会员号'] = self.__account[0:-2]
        temphead['结算会员名称'] = '中信期货(0018)'
        temphead['资金账号'] = self.__account
        temphead['账号属性'] = '经纪'
        temphead['结算日期'] = self.__mydate
        #print(temphead.items())

        strheader = ['结算会员号: ' + temphead['结算会员号'], '结算会员名称: ' + temphead['结算会员名称'], '资金账号: ' + temphead['资金账号'], '账号属性: ' + temphead['账号属性'], '结算日期: ' + temphead['结算日期'] ]
        print(strheader)
        headTable = PrettyTable(strheader)
        headTable.set_style(PLAIN_COLUMNS)
        headTable.padding_width = 0
        headTable.add_row(['', '', '', '', ''])
        print(headTable)

        txtTable = PrettyTable(['项目                                                                                  ', '金额'])
        txtTable.set_style(DEFAULT)
        txtTable.align["项目                                                                                  "] = "l"
        txtTable.align["金额"] = 'r'
        txtTable.padding_width = 1
        txtTable.add_row(['上一交易日实有货币资金余额', self.__Balance_bf])
        txtTable.add_row(['加：当日收入资金', self.__Deposit])
        txtTable.add_row(['当日盈亏', self.__MTM])
        txtTable.add_row(['减：当日付出资金', self.__Payment])
        txtTable.add_row(['手续费', self.__Commission])
        txtTable.add_row(['其中：交易手续费', self.__Commission])
        txtTable.add_row(['结算手续费', '0.00'])
        txtTable.add_row(['交割手续费', '0.00'])
        txtTable.add_row(['移仓手续费', '0.00'])
        txtTable.add_row(['当日实有货币资金余额', self.__Balance_cf])
        txtTable.add_row(['其中：交易保证金', self.__Margin_Occupied])
        txtTable.add_row(['结算准备金', self.__Fund_Avail])
        txtTable.add_row(['减：交易保证金', self.__Margin_Occupied])
        txtTable.add_row(['当日结算准备金余额', self.__Fund_Avail])
        txtTable.add_row(['加：申报划入金额', '0.00'])
        txtTable.add_row(['减：申报划出金额', '0.00'])
        txtTable.add_row(['下一交易日开仓准备金', self.__Fund_Avail])
        txtTable.add_row(['其它', '-'])
        txtTable.add_row(['应收手续费', self.__Commission])
        txtTable.add_row(['实有货币资金变动', self.__MTM])
        txtTable.add_row(['其中：交易保证金变动', '0.00'])
        txtTable.add_row(['结算准备金变动', '0.00'])

        print(txtTable)
        print('\n')
        print('收入与付出资金明细栏')
        z = PrettyTable(["单据号                        ", "名称                                                    ", "金额"])
        z.set_style(DEFAULT)
        z.hrules = ALL
        #z.border = False
        z.padding_width = 150
        z.add_row(['', '', ''])
        print(z)

        if os.path.isfile(path):
            os.remove(path)
            print(path + " removed!"  )
        f = open(path, 'a')
        f.write(tempTableName)
        f.write('\n')
        f.write('\n')
        f.write(headTable.get_string())
        f.write('\n')
        f.write(txtTable.get_string())
        f.write('\n')
        f.write('\n')
        f.write('收入与付出资金明细栏')
        f.write('\n')
        f.write(z.get_string())
        f.close()
        return
'''    def __init__(self, txt = []):
        self.__header = txt[0].strip('\n')


        print("  __init__(self, **accSum)")
        return'''

class positionsDetail:
    __myName = ''
    __keyWords = ['交易所', '合约', '开仓日期', '投/保', '买/卖', '持仓量', '开仓价', '结算价', '盯市盈亏', '保证金']
    __recList = []
    def __init__(self):
        __myName = '持仓明细'
        return
    def set(self, txt = []):
        list = []
        phanzi = re.compile(u'[\u4e00-\u9fa5]+\/?[\u4e00-\u9fa5]+');
        keys = phanzi.findall(txt[1])
        keySize = keys.__len__()
        temp = {}
        for line in txt[2:]:



            collectVal = re.compile(u'[A-Za-z]{1,2}\d{3,4}|[-+]?\d+\.?\d+|[\u4e00-\u9fa5]+|\d');
            val = collectVal.findall(line)
            valSize = val.__len__()
            print(val)
            temp = {}

            if keySize != valSize:
                print("keySize: " + str(keySize) + " valSize: " + str(valSize))
            else:
                for index in range(len(keys)):
                    temp[keys[index]] = val[index]
                self.__recList.append(temp)
                list.append(temp)
        print(self.__recList)
        print(list)
        return

    def writeTxt(self, path):
        print('持仓明细 pass')
        return
class positions:#持仓汇总
    __name = '持仓汇总'
    __myList = []
    __account = ''
    __mydate = ''
    def __init__(self):
        __myName = '持仓汇总'
        print(__myName)
        return
    def set(self, txt = []):
        list = []
        phanzi = re.compile(u'[\u4e00-\u9fa5]+\/?[\u4e00-\u9fa5]+');
        keys = phanzi.findall(txt[1])
        keySize = keys.__len__()
        temp = {}
        for line in txt[2:]:



            collectVal = re.compile(u'[A-Za-z]{1,2}\d{3,4}|[-+]?\d+\.?\d+|[\u4e00-\u9fa5]+|\d');
            val = collectVal.findall(line)
            valSize = val.__len__()
            print(val)
            temp = {}

            if keySize != valSize:
                print("keySize: " + str(keySize) + " valSize: " + str(valSize))
            else:
                for index in range(len(keys)):
                    temp[keys[index]] = val[index]
                self.__myList.append(temp)
                list.append(temp)
        print(self.__myList)
        print(list)
        return
    def setAccNdate(self, acc, date):
        self.__account = acc[0:-2]
        self.__mydate = date

        return

    def writeTxt(self, path, strHeader):
        HSName = '中信期货有限公司标准合约结算明细表'
        keys = self.__myList[0].keys()
        templist = self.__myList.copy()
        txtTable = PrettyTable(['结算会员号', '客户编码', '合约', '结算价', '买开成交量', '买平成交量', '买成交量合计', '卖开成交量', '卖平成交量', '卖成交量合计', '买入成交额', '卖出成交额', '买持仓量合计', '卖持仓量合计', '交易保证金', '当日盈亏', '手续费'])
        txtTable.set_style(DEFAULT)
        txtTable.align = "r"
        txtTable.padding_width = 1
        txtTable.float_format = .2
        #|  合约  | 买/卖 | 持仓数量 |  开仓均价  |  结算价  | 持仓盯市盈亏 |    保证金占用   |  投保  |
        tempTabRows = {}
        for onePos in templist:
            instrument = onePos['合约']
            buyHolding = 0
            sellHolding = 0
            if not instrument in tempTabRows:
                if '买' in onePos['买/卖']:
                    buyHolding = int(onePos['持仓数量'])
                else:
                    sellHolding = int(onePos['持仓数量'])
                oneTabRow = ['0000', '00000000', onePos['合约'], float(onePos['结算价']), 0, 0, 0, 0, 0, 0, 0.00, 0.00,buyHolding, sellHolding, float(onePos['保证金占用']), float(onePos['持仓盯市盈亏']), 0.00 ]
                tempTabRows[instrument] = oneTabRow
            else:
                if '买' in onePos['买/卖']:
                    buyHolding = int(onePos['持仓数量'])
                else:
                    sellHolding = int(onePos['持仓数量'])
                existRow = tempTabRows[instrument]
                existRow[12] += buyHolding
                existRow[13] += sellHolding
                if float(onePos['保证金占用']) > existRow[15]:
                    existRow[14] = float(onePos['保证金占用'])
                existRow[15] += float(onePos['持仓盯市盈亏'])
                tempTabRows[instrument] = existRow
        rowVals = tempTabRows.values()

        for rowVal in rowVals:
                txtTable.add_row(rowVal)

        print(txtTable)


        if os.path.isfile(path):
            os.remove(path)
            print(path + " removed!"  )
        f = open(path, 'a')
        f.write(HSName)
        f.write('\n')
        f.write('\n')
        f.write(strHeader)
        f.write('\n')
        f.write(txtTable.get_string())
        f.write('\n')


        f.close()

        return
class transaction:#成交明细
    __name = '成交明细'

    __myList = []
    def __init__(self):
        __myName = '持仓汇总'
        print(__myName)
        return
    def set(self, txt = []):
        list = []
        phanzi = re.compile(u'[\u4e00-\u9fa5]+\/?[\u4e00-\u9fa5]+');
        keys = phanzi.findall(txt[1])
        keySize = keys.__len__()
        temp = {}
        for line in txt[2:]:



            collectVal = re.compile(u'[A-Za-z]{1,2}\d{3,4}|[-+]?\d+\.?\d+|[\u4e00-\u9fa5]+|\d');
            val = collectVal.findall(line)
            valSize = val.__len__()
            print(val)
            temp = {}

            if keySize != valSize:
                print("keySize: " + str(keySize) + " valSize: " + str(valSize))
            else:
                for index in range(len(keys)):
                    temp[keys[index]] = val[index]
                self.__myList.append(temp)
                list.append(temp)
        print(self.__myList)
        print(list)
        return
    def writeTxt(self, path):

        return
class kingNew:
    __myPath = './txt/'
    __company = ''
    __acc = ''
    __date = ''
    __strHeader = ''
    name = 'test'
    __myAcc = account()
    __myPositionsDetail = positionsDetail()
    __myPositions = positions()
    __myTransaction = transaction()
    keyWords = ['结算单', '资金状况', '持仓明细', '持仓汇总', '成交明细']
    settlementTxt = []
    accountTxt = []
    depositTxt = []
    transactionTxt = []
    positionsDetailTxt = []
    positionsTxt = []
    def setAccNdate(self, txt = []):
        NameToValue = {}
        for line in txt[1:]:

            str = ' '.join(line.split())
            phanzi=re.compile(u'[\u4e00-\u9fa5]+');

            res = phanzi.findall(str)
            nums = re.findall(r'(\d+)', str)


            index = 0
            for name in res:
                NameToValue[name] = nums[index]
                index += 1
        self.__acc = NameToValue['账户']
        self.__date = NameToValue['日期']
        #结算会员:13887    结算会员名称:中信期货(0018)   结算日期:20161213
        self.__strHeader = '结算会员: ' + self.__acc[0:-2] + '       结算会员名称:中信期货(0018)' + '      结算日期:' + self.__date
        return
    def setSettlementTxt(self, txt = []):
        for line in txt:
            self.settlementTxt.append(line)
        return
    def setAccountTxt(self, txt = []):
        self.accountTxt.extend(txt)
        return
    def setPositionsDetailTxt(self, txt = []):
        self.positionsDetailTxt.extend(txt)
        return
    def setPositionsTxt(self, txt = []):
        self.positionsTxt.extend(txt)
        return
    def setTransactionTxt(self, txt = []):
        self.transactionTxt.extend(txt)
        return
    operator = {'结算单':setSettlementTxt, '资金状况':setAccountTxt, '持仓明细':setPositionsDetailTxt, '持仓汇总':setPositionsTxt, '成交明细':setTransactionTxt}
    def __init__(self):
        print('__init__')
        print(self.name)
        return
    def __init__(self, textList = []):
        print('__init__')
        block = []
        for line in textList:
            if line.strip('\n') == '' or '---' in line:
                continue
            else:
                block.append(line.strip())

        self.cleanRawTxt(block)
        return

    def getBlockType(self, line):

        for key in self.keyWords:
            if key in line:
                print(key)

        return
    def cleanRawTxt(self,txt):
        cleanTxt = []
        txtcup = []
        tempkey = ''
        newBlock = False

        for line in txt:
            for key in self.keyWords:
                if key in line:
                    if txtcup:
                        self.operator.get(tempkey)(self, txtcup)
                        txtcup.clear()
                    tempkey = key
                    newBlock = True
                    break

            txtcup.append(line)

        if txtcup:
            self.operator.get(tempkey)(self, txtcup)
            txtcup.clear()
        if self.settlementTxt:
            self.setAccNdate(self.settlementTxt)
        if self.accountTxt:
            self.__myAcc.set(self.accountTxt)
            self.__myAcc.setAccNdate(self.settlementTxt)
            self.__myAcc.writeTxt(self.__myPath + 'Capital.txt')
        if self.positionsDetailTxt:
            self.__myPositionsDetail.set(self.positionsDetailTxt)
            #self.__myPositionsDetail.writeTxt(self.__myPath)
        if self.positionsTxt:
            self.__myPositions.set(self.positionsTxt)
            #self.__myPositions.setHeader(self.__strHeader)
            self.__myPositions.writeTxt(self.__myPath + 'SettlementDetail.txt', self.__strHeader)
        if self.transactionTxt:
            self.__myTransaction.set(self.transactionTxt)
            self.__myTransaction.writeTxt(self.__myPath + 'Trade.txt')

        return
    def writeHSBill(self):

        return